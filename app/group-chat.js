import { Colors } from "@/constants/Colors";
import { useColorScheme } from "@/hooks/useColorScheme";
import { router, useLocalSearchParams } from "expo-router";
import { useEffect, useRef, useState } from "react";
import {
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  ScrollView,
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
} from "react-native";

export default function GroupChatScreen() {
  const { groupId } = useLocalSearchParams();
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "ÏïàÎÖïÌïòÏÑ∏Ïöî! ÏÉàÎ°ú Í∞ÄÏûÖÌïú Îì±ÏÇ∞ Ï¥àÎ≥¥ÏûÖÎãàÎã§ üòä",
      author: "Îì±ÏÇ∞Îü¨Î≤Ñ",
      timestamp: "14:30",
      isMe: false,
    },
    {
      id: 2,
      text: "Ïñ¥ÏÑúÏò§ÏÑ∏Ïöî! ÌôòÏòÅÌï©ÎãàÎã§ üéâ",
      author: "ÏÇ∞ÏïÖÎåÄÏû•",
      timestamp: "14:32",
      isMe: false,
    },
    {
      id: 3,
      text: "Îã§Ïùå Ï£º ÏßÄÎ¶¨ÏÇ∞ Îì±Î∞ò Í≥ÑÌöçÏùÄ Ïñ¥ÎñªÍ≤å ÎêòÎÇòÏöî?",
      author: "ÎÇò",
      timestamp: "14:35",
      isMe: true,
    },
    {
      id: 4,
      text: "ÏùºÏöîÏùº Ïò§Ï†Ñ 8ÏãúÏóê Ï∂úÎ∞ú ÏòàÏ†ïÏûÖÎãàÎã§! Ï∞∏Ïó¨ÌïòÏã§ Î∂ÑÏùÄ ÎåìÍ∏Ä ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî",
      author: "ÏÇ∞ÏïÖÎåÄÏû•",
      timestamp: "14:36",
      isMe: false,
    },
    {
      id: 5,
      text: "Ï†ÄÎèÑ Ï∞∏Ïó¨ÌïòÍ≥† Ïã∂Ïñ¥Ïöî! üôã‚Äç‚ôÄÔ∏è",
      author: "ÌïòÏù¥ÌÇπÍ±∏",
      timestamp: "14:38",
      isMe: false,
    },
  ]);

  const scrollViewRef = useRef();
  const colorScheme = useColorScheme();
  const themeColors = Colors[colorScheme ?? "light"];

  // ÏÉòÌîå Í∑∏Î£π Ï†ïÎ≥¥
  const groupInfo = {
    1: {
      title: "ÏÑúÏö∏ ÏßÄÎ¶¨ÏÇ∞ ÏÇ∞Ìñâ Î™®ÏûÑ",
      members: 15,
      location: "ÏÑúÏö∏",
      level: "Ï§ëÍ∏â",
    },
    2: {
      title: "Î∂ÄÏÇ∞ Îì±ÏÇ∞ Ï¥àÎ≥¥ Î™®ÏûÑ",
      members: 8,
      location: "Î∂ÄÏÇ∞",
      level: "Ï¥àÍ∏â",
    },
    3: {
      title: "Îì±ÏÇ∞ ÏÇ¨ÏßÑ ÎèôÌò∏Ìöå",
      members: 25,
      location: "Ï†ÑÍµ≠",
      level: "Ï§ëÍ∏â",
    },
  };

  const currentGroup = groupInfo[groupId] || groupInfo[1];

  useEffect(() => {
    scrollViewRef.current?.scrollToEnd({ animated: true });
  }, [messages]);

  // ÌÉÄÏûÑÏä§ÌÉ¨ÌîÑ Ìè¨Îß∑ Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò
  const formatTimestamp = (date) => {
    return date.toLocaleTimeString("ko-KR", {
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const handleSendMessage = () => {
    if (message.trim()) {
      const newMessage = {
        id: messages.length + 1,
        text: message.trim(),
        author: "ÎÇò",
        timestamp: formatTimestamp(new Date()),
        isMe: true,
      };
      setMessages([...messages, newMessage]);
      setMessage("");
    }
  };

  const MessageBubble = ({ msg }) => (
    <View
      style={[
        styles.messageContainer,
        msg.isMe ? styles.myMessageContainer : styles.otherMessageContainer,
      ]}
    >
      {!msg.isMe && (
        <Text style={[styles.authorName, { color: themeColors.text + "80" }]}>
          {msg.author}
        </Text>
      )}
      <View
        style={[
          styles.messageBubble,
          msg.isMe
            ? { backgroundColor: themeColors.tint || "#007AFF" }
            : { backgroundColor: themeColors.card },
        ]}
      >
        <Text
          style={[
            styles.messageText,
            { color: msg.isMe ? "white" : themeColors.text },
          ]}
        >
          {msg.text}
        </Text>
      </View>
      <Text style={[styles.timestamp, { color: themeColors.text + "60" }]}>
        {msg.timestamp}
      </Text>
    </View>
  );

  return (
    <SafeAreaView
      style={[styles.container, { backgroundColor: themeColors.background }]}
    >
      {/* Ìó§Îçî */}
      <View style={[styles.header, { backgroundColor: themeColors.card }]}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => router.back()}
        >
          <Text
            style={[
              styles.backButtonText,
              { color: themeColors.tint || "#007AFF" },
            ]}
          >
            ‚Üê Îí§Î°ú
          </Text>
        </TouchableOpacity>
        <View style={styles.headerInfo}>
          <Text style={[styles.groupTitle, { color: themeColors.text }]}>
            {currentGroup.title}
          </Text>
          <Text
            style={[styles.memberCount, { color: themeColors.text + "80" }]}
          >
            Î©§Î≤Ñ {currentGroup.members}Î™Ö
          </Text>
        </View>
        <TouchableOpacity style={styles.menuButton}>
          <Text
            style={[
              styles.menuButtonText,
              { color: themeColors.tint || "#007AFF" },
            ]}
          >
            ‚ãØ
          </Text>
        </TouchableOpacity>
      </View>

      {/* Ï±ÑÌåÖ ÏòÅÏó≠ */}
      <KeyboardAvoidingView
        style={styles.chatContainer}
        behavior={Platform.OS === "ios" ? "padding" : "height"}
      >
        <ScrollView
          ref={scrollViewRef}
          style={styles.messagesContainer}
          contentContainerStyle={styles.messagesContent}
          showsVerticalScrollIndicator={false}
        >
          {messages.map((msg) => (
            <MessageBubble key={msg.id} msg={msg} />
          ))}
        </ScrollView>

        {/* ÏûÖÎ†• ÏòÅÏó≠ */}
        <View
          style={[styles.inputContainer, { backgroundColor: themeColors.card }]}
        >
          <TextInput
            style={[
              styles.textInput,
              {
                backgroundColor: themeColors.background,
                color: themeColors.text,
                borderColor: themeColors.border || "#ddd",
              },
            ]}
            value={message}
            onChangeText={setMessage}
            placeholder="Î©îÏãúÏßÄÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
            placeholderTextColor={themeColors.text + "60"}
            multiline
            maxLength={1000}
          />
          <TouchableOpacity
            style={[
              styles.sendButton,
              {
                backgroundColor: message.trim()
                  ? themeColors.tint || "#007AFF"
                  : "#ccc",
              },
            ]}
            onPress={handleSendMessage}
            disabled={!message.trim()}
          >
            <Text style={styles.sendButtonText}>Ï†ÑÏÜ°</Text>
          </TouchableOpacity>
        </View>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  header: {
    flexDirection: "row",
    alignItems: "center",
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#E0E0E0",
  },
  backButton: {
    paddingRight: 16,
  },
  backButtonText: {
    fontSize: 16,
    fontWeight: "600",
  },
  headerInfo: {
    flex: 1,
  },
  groupTitle: {
    fontSize: 16,
    fontWeight: "600",
    marginBottom: 2,
  },
  memberCount: {
    fontSize: 12,
  },
  menuButton: {
    paddingLeft: 16,
  },
  menuButtonText: {
    fontSize: 20,
    fontWeight: "bold",
  },
  chatContainer: {
    flex: 1,
  },
  messagesContainer: {
    flex: 1,
  },
  messagesContent: {
    paddingHorizontal: 16,
    paddingVertical: 12,
  },
  messageContainer: {
    marginBottom: 16,
  },
  myMessageContainer: {
    alignItems: "flex-end",
  },
  otherMessageContainer: {
    alignItems: "flex-start",
  },
  authorName: {
    fontSize: 12,
    marginBottom: 4,
    marginLeft: 8,
  },
  messageBubble: {
    maxWidth: "80%",
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderRadius: 20,
  },
  messageText: {
    fontSize: 14,
    lineHeight: 20,
  },
  timestamp: {
    fontSize: 11,
    marginTop: 4,
    marginHorizontal: 8,
  },
  inputContainer: {
    flexDirection: "row",
    alignItems: "flex-end",
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderTopWidth: 1,
    borderTopColor: "#E0E0E0",
  },
  textInput: {
    flex: 1,
    borderWidth: 1,
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 12,
    marginRight: 12,
    maxHeight: 100,
    fontSize: 14,
  },
  sendButton: {
    borderRadius: 20,
    paddingHorizontal: 20,
    paddingVertical: 12,
    justifyContent: "center",
    alignItems: "center",
  },
  sendButtonText: {
    color: "white",
    fontSize: 14,
    fontWeight: "600",
  },
});
